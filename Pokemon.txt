#include <iostream>
#include <thread> // this_thread, sleep_for()
#include <chrono>  // milliseconds
#include <string>
#include <unistd.h>
#include <termios.h>
using namespace std;
class ScreenEffects {       // The class
  public:             // Access specifier
    void PrintTransition()
{
for(int i=0;i<3;i++)
    {
cout<<"*************"<<endl;
std::this_thread::sleep_for(std::chrono::milliseconds(1000));
    }

}
    void screenSleep(int a)
{
  std::this_thread::sleep_for(std::chrono::milliseconds(a));
}
 void screenSleep()
{
  std::this_thread::sleep_for(std::chrono::milliseconds(1000));
}
void clear()
{
  std::cout << "\033[2J\033[1;1H";
}
void sleep(int sleep)
{
  
  int i=0;
while(i<sleep)
i++;
}
};
class inputCatcher {       // The class
  public:             // Access specifier
  char getInput()
{
  char input;
input=getch();
return input;
}
string getInputWithSpace()
{
  string fightAction;
  getline(cin, fightAction);
  return fightAction;
}
    char getch(void)
{
    char buf = 0;
    struct termios old = {0};
    fflush(stdout);
    if(tcgetattr(0, &old) < 0)
        perror("tcsetattr()");
    old.c_lflag &= ~ICANON;
    old.c_lflag &= ~ECHO;
    old.c_cc[VMIN] = 1;
    old.c_cc[VTIME] = 0;
    if(tcsetattr(0, TCSANOW, &old) < 0)
        perror("tcsetattr ICANON");
    if(read(0, &buf, 1) < 0)
        perror("read()");
    old.c_lflag |= ICANON;
    old.c_lflag |= ECHO;
    if(tcsetattr(0, TCSADRAIN, &old) < 0)
        perror("tcsetattr ~ICANON");
   // printf("%c\n", buf);
    return buf;
 }
    
};

char getch(void)
{
    char buf = 0;
    struct termios old = {0};
    fflush(stdout);
    if(tcgetattr(0, &old) < 0)
        perror("tcsetattr()");
    old.c_lflag &= ~ICANON;
    old.c_lflag &= ~ECHO;
    old.c_cc[VMIN] = 1;
    old.c_cc[VTIME] = 0;
    if(tcsetattr(0, TCSANOW, &old) < 0)
        perror("tcsetattr ICANON");
    if(read(0, &buf, 1) < 0)
        perror("read()");
    old.c_lflag |= ICANON;
    old.c_lflag |= ECHO;
    if(tcsetattr(0, TCSADRAIN, &old) < 0)
        perror("tcsetattr ~ICANON");
   // printf("%c\n", buf);
    return buf;
 }



class Character
{
    public:
    Character()
    {
        HP=10;
    }
    protected:
    int HP;
    
    
};
class Player : public Character
{
    public:
    Player()
    {
        HP=10;
        score=0;
        positionY=0;
        positionX=0;
        defeatedMonsters=0;
         attackAmount=rand()%10;
         int damage=0;
    }
    int getPositionX()
    {
        return positionX;
    }
    void subtractHP(int damageAmount)
    {
      HP=HP-damageAmount;
    }
    int getDamage()
    {
      return damage;
    }
    void setHP(int newHP)
    {
      HP=newHP;
    }
    void randomizeDamage()
    {
      damage=rand()%10;
    }
    int getAttackAmount()
    {
      return attackAmount;
    }
    void addPositionX(int add)
    {
      positionX=positionX+add;
    }
    void randomizeAttackAmount()
    {
       attackAmount=rand()%10;
    }
    void addPositionY(int add)
    {
      positionY=positionY+add;
    }
     void subtractPositionX(int subtract)
    {
      positionX=positionX-subtract;
    }
    void subtractPositionY(int subtract)
    {
      positionY=positionY- subtract;
    }
    int getPositionY()
    {
        return positionY;
    }
    int getScore()
    {
        return score;
    }
    void increaseScore()
    {
      score++;
    }
    int getHP()
    {
        return HP;
    }
    int getDefeatedMonsters()
    {
        return defeatedMonsters;
    }
    private:
    int attackAmount;
    int damage;
    int positionX;
    int positionY;
    int score;
    int HP;
    int defeatedMonsters;
    
    
};
class Map {       
  public: 
  int getmapSize1()
  {
    return mapSize1;
  }
  void printMap( Player ThePlayer)
{
	for(int i=0;i<15;i++)
  {
    for(int j=0;j<15;j++)
    {
      if(ThePlayer.getPositionX()==j&&ThePlayer.getPositionY()==i)
      cout<<"B";
      else cout<<"#";

    }
    cout<<endl;
  }

}

  int getmapSize2()
  {
    return mapSize2;
  }
  void setmapSize1(int newMapSize)
  {
    mapSize1=newMapSize;
  }
  void setmapSize2(int newMapSize)
  {
    mapSize2=newMapSize;
  }
  Map()
  {
      mapSize1=15;
      mapSize2=15;
      for(int i=0;i<mapSize1;i++)
  {
    for(int j=0;j<mapSize2;j++)
    {
      map[i][j]=0;

    }
  }
  }
  
   int map[15][15]; 
   private:
   int mapSize1;
   int mapSize2;
  
};

class Enemy : public Character
{
    public:
    int getEnemyHP()
    {
      return enemyHP;
    }
    void subtractHP(int attackAmount)
    {
        enemyHP=enemyHP-attackAmount;
    }
    void randomizeEnemyHP()
    {
      enemyHP=rand()%10;
    }
    Enemy()
    {
       enemyHP=5;
    }
    private:
    
    
    int enemyHP;
    
    
    
};


class GameLogic
{
    private:
    int talkChance;
    int runAwayChance;
    int fightChance;
    int round;
    string fightAction;
    bool isGrass;
    bool triedToTalk;
  bool isGameOver;
  bool isFight;
    
    public:
    int getFightChance()
    {
        return fightChance;
    }
    int getRunAwayChance()
    {
      return runAwayChance;
    }
    int getTalkChance()
    {
      return talkChance;
    }
    void setFightAction(string newFightAction)
    {
        fightAction=newFightAction;
    }
    void randomizeFightChance()
    {
        fightChance=rand()%100;
    }
    void setIsGameOverFalse()
    {
      isGameOver=false;
    }
    void setIsGameOverTrue()
    {
      isGameOver=true;
    }
    void setIsGrassTrue()
    {
      isGrass=true;
    }
    void setIsGrassFalse()
    {
      isGrass=false;
    }
    void setTriedToTalkTrue()
    {
      triedToTalk=true;
    }
    void setTriedToTalkFalse()
    {
     triedToTalk=false;
    }
    void setIsFightTrue()
    {
      isFight=true;
    }
    void setIsFightFalse()
    {
      isFight=false;
    }
    bool getIsGrass()
    {
        return isGrass;
    }
    void setRound(int newRound )
    {
      round=newRound;
    }
    bool getTriedToTalk()
    {
        return triedToTalk;
    }
    bool getIsGameOver()
    {
        return isGameOver;
    }
    bool getIsFight()
    {
        return isFight;
    }
    int getRound()
    {
        return round;
    }
    void increaseRound()
    {
      round++;
    }
    string getFightAction()
    {
        return fightAction;
    }
    void randomizeTalkChance()
    {
      talkChance=rand()%100;
    }
    void randomizeRunAwayChance()
    {
      talkChance=rand()%100;
    }
    GameLogic()
    {
        round=1;
        talkChance=rand()%100;
        runAwayChance=rand()%100;
        fightChance=0;
        isGrass=true;
         triedToTalk=false;
   isGameOver=false;
   isFight=false;
    }
    
};

class GameText
{
  public:
  string score="Score:";
  string space=" ";
  string youBecameFriends="You became friends with the monster!";
  string youDefeatedTheEnemy="You've defeated the enemy.";
  string yourHealth="Your health:";
  string HP="HP";
  string badInputTryAgain="Bad input, try again";
  string gameOver="Game Over!";
  string forString="for ";
  string youGotHitFor="You got hit for";
  string managedToRunAway="You managed to run away!";
  string couldntRunAway="You couldn't run away!";
  string talkingDidntWork="Talking didn't work!";
  string youAttackedTheEnemy="You attacked the enemy for " ;
  string points="points.";
  string trySomethingElse="You've already tried talking! Try something else.";
  string youAreAttacked="You are being attacked by a monster!";
  string enemyIsAt="The enemy is at ";
  string health="health.";
  string youWonThisBattle="You won this battle!";
  string youWereDefeated="You were defeated, try again!";
  string chooseYourAction="Choose your action: attack / talk / run away / quit" ;
  string getText(string message)
  {
    return message;
  }
  
};
bool testPlayerHP(int HP)
{
  try {
  
  if (HP <=10) {
    cout << "HP stats haven't been changed"<<endl;
    return true;
  } else {
    throw (HP);

  }
}
catch (int HP) {
  cout << "Player health was changed! You're cheating \n";

  cout << "Setting health back to default"<<endl;
  return false;
}

}
bool testAttackAmount(int attackAmount)
{
  try {
  
  if (attackAmount <=10) {
    cout << "Damage stats haven't been changed"<<endl;
    return true;
  } else {
    throw (attackAmount);

  }
}
catch (int attackAmount) {
  cout << "Player damage was changed! You're cheating \n"<<endl;

  cout << "Setting damage back to default"<<endl;
  return false;
}

}
bool testMapSize(int mapSize1, int mapSize2)
{
  try {
  
  if (mapSize1==15) {
    cout << "Map stats haven't been changed"<<endl;
    return true;
  } else {
    throw (mapSize1);

  }
if (mapSize2==15) {
    cout << "Map stats haven't been changed"<<endl;
    return true;
  } else {
    throw (mapSize2);

  }
}
catch (int mapSize1) {
  cout << "Map sizes were changed! You're cheating! \n"<<endl;

  cout << "Setting map back to default"<<endl;
  return false;
}


}
int main() {
  
  ScreenEffects Screen;
  GameLogic Logic;
  GameText GameText;
  Map Map;
  bool fight=false;
  Enemy Enemy;
  Player Player;
  inputCatcher InputCatcher;
  if(testPlayerHP(Player.getHP())==false)
  {
    Player.setHP(10);
  }

if(testMapSize(Map.getmapSize1(),Map.getmapSize2())==false)
  {
    Map.setmapSize1(15);
    Map.setmapSize2(15);
  }

if(testAttackAmount(Player.getAttackAmount())==false)
  {
    Player.randomizeAttackAmount();
  }

  
  Screen.PrintTransition();
  Screen.clear();
  

 while(Logic.getIsGameOver()==false)
 {
 
 
  while(Logic.getIsGrass()==true && Logic.getIsGameOver()==false)
  {
    
    Screen.clear();
   /* for(int i=0;i<15;i++)
  {
    for(int j=0;j<15;j++)
    {
      if(Player.getPositionX()==j&&Player.getPositionY()==i)
      cout<<"B";
      else cout<<"#";

    }
    cout<<endl;
  }*/

  Map.printMap(Player);

  char input=getch();
  if(input=='d'&&Player.getPositionX()!=14)
  {
    Player.addPositionX(1);
  }
  else if(input=='a'&&Player.getPositionX()!=0)
  {
    Player.subtractPositionX(1);
  }
  else if(input=='s'&&Player.getPositionY()!=14)
  {
    Player.addPositionY(1);

  }
  else if(input=='w'&&Player.getPositionY()!=0)
  {
    Player.subtractPositionY(1);
    
  }
  else if(input=='q')
  {
    Logic.setIsGameOverTrue();
    
  }
  Logic.randomizeFightChance();
  if(Logic.getFightChance()>91)
  {
    Logic.setIsGrassFalse();
    Logic.setIsFightTrue();
    Logic.setRound(1);
    Logic.setTriedToTalkFalse();
    
    Logic.setIsGameOverFalse();
  }
  Screen.clear();
  
  }
  


  while(Logic.getIsFight() ==true && Logic.getIsGameOver() == false)
  {
    if(Logic.getRound()==1) Screen.PrintTransition();
    
   
    Screen.clear();
    
    cout<<GameText.getText(GameText.score)<< Player.getScore()<<endl;
    cout<<GameText.getText(GameText.yourHealth)<<" "<<Player.getHP()<<" "<<GameText.getText(GameText.HP)<<endl;
    cout<<endl;
   
  
    if(Logic.getRound()==1)
    {
      
      
      Enemy.randomizeEnemyHP();
    
      cout<< GameText.getText(GameText.youAreAttacked)<<endl;
    }
    

    cout<<GameText.getText(GameText.enemyIsAt)<<Enemy.getEnemyHP()<<" "<< GameText.getText(GameText.health);
    cout<<GameText.getText(GameText.chooseYourAction);
    cout<<endl;
    
    
    Logic.setFightAction(InputCatcher.getInputWithSpace());
    if(Logic.getFightAction()=="attack")
    {
       
      
      
     
      cout<<GameText.getText(GameText.youAttackedTheEnemy)<<GameText.getText(GameText.forString)<<Player.getAttackAmount()<<" "<<GameText.getText(GameText.points)<<endl;
      Screen.screenSleep(3000);
      if(Enemy.getEnemyHP()<=Player.getAttackAmount()) 
      {
        Screen.screenSleep();
        cout<<GameText.getText(GameText.youDefeatedTheEnemy)<<endl;
        Screen.screenSleep();
        
        Player.increaseScore();
        Logic.setIsFightFalse();
        Logic.setIsGrassTrue();
      }
      Enemy.subtractHP(Player.getAttackAmount());
     
      
    }
    else if(Logic.getFightAction()=="talk"&&Logic.getTriedToTalk()==false)
    {
      Logic.randomizeTalkChance();
      if(Logic.getTalkChance()>50)
      {
        Screen.screenSleep();
        cout<<GameText.getText(GameText.youBecameFriends)<<endl;
        Screen.screenSleep();
        
        Player.increaseScore();
        Logic.setIsFightFalse();
        Logic.setIsGrassTrue();
      }
      else 
      {
        Screen.screenSleep();
        cout<<GameText.getText(GameText.talkingDidntWork)<<endl;
        Screen.screenSleep();
        //Screen.sleep(3);
         Logic.setTriedToTalkTrue();

      }
    }
    else if(Logic.getFightAction()=="talk"&&Logic.getTriedToTalk()==true)
    {
      Screen.screenSleep();
      cout<<GameText.getText(GameText.trySomethingElse)<<endl;
      Screen.screenSleep();
      sleep(3);
    }
    else if(Logic.getFightAction()=="run away")
    {
      
     Logic.randomizeRunAwayChance();
      if(Logic.getRunAwayChance()>1)
      {
        Screen.screenSleep();
        cout<<GameText.getText(GameText.managedToRunAway)<<endl; 
        Screen.screenSleep();
         
          Logic.setIsGrassTrue();
          Logic.setIsFightFalse();
      }
      else 
      {
       Screen.screenSleep();
        cout<<GameText.getText(GameText.couldntRunAway)<<endl;
        Screen.screenSleep();
        
        Player.randomizeDamage();

        Screen.screenSleep();
        cout<<GameText.getText(GameText.youGotHitFor)<<Player.getDamage()<<GameText.getText(GameText.points)<<endl;
        Screen.screenSleep();
        Player.subtractHP(Player.getDamage());
        

        if(Player.getHP()<=0)
        {
          Screen.screenSleep();
          cout<<GameText.getText(GameText.youWereDefeated)<<endl;
          Screen.screenSleep();
          Logic.setIsGameOverTrue();
          Logic.setIsGrassFalse();
          Logic.setIsFightFalse();
          
        }
        
      }

      
    }
    else if(Logic.getFightAction()=="quit")
    {
      Logic.setIsGameOverTrue();
          Logic.setIsGrassFalse();
          Logic.setIsFightFalse();

      
    
    }
     else if(Logic.getFightAction()=="win")
    {
      Screen.screenSleep();
      cout<<GameText.getText(GameText.youWonThisBattle)<<endl; 
     Screen.screenSleep();
      Player.increaseScore();
       Logic.setIsGrassTrue();
        Logic.setIsFightFalse();
        fight=false;
      
    
    }
    else 
    {
     Screen.screenSleep();
      cout<<GameText.getText(GameText.badInputTryAgain)<<endl;
      Screen.screenSleep();
    }
    
    Logic.increaseRound();
    
    
  }

 }
 if(Logic.getIsGameOver()==true)
 {
   Screen.clear();
   cout<<GameText.getText(GameText.gameOver)<<endl; 
 }
  
}
